# This workflow will upload a Python Package using PyInstaller when a release is published
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Publish to Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      OUTPUT_FILE_PREFIX: CSVFilter.Setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools
          pip-sync requirements.txt

      - name: Update configuration file
        run: python prebuild_scripts/version.py

      - name: Read config file
        id: read_config
        run: |
          $version = (python -c "import configparser;config = configparser.ConfigParser();config.read('config.ini');print(config.get('DEFAULT', 'version'))")
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build executable
        run: |
          echo "Using version: ${{ steps.read_config.outputs.version }}"
          pyinstaller --onefile --add-data "resources;resources" --add-data "config.ini;." --icon="resources/csv_filter.ico" --windowed --clean --name "${{ env.OUTPUT_FILE_PREFIX }}.${{ steps.read_config.outputs.version }}" main.py

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.read_config.outputs.version }}
          release_name: Release ${{ steps.read_config.outputs.version }}
          draft: false
          prerelease: false

      - name: Delete old releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $current_release = "${{ steps.read_config.outputs.version }}"
          $allReleases = gh release list --limit 1000 | ForEach-Object { $_.Split()[1] }
          foreach ($release in $allReleases) {
              if ($null -ne $current_release -and $release -ne $current_release) {
                  try {
                      Write-Host "Attempting to delete release: $release"
                      $output = gh release delete $release --cleanup-tag -y 2>&1 | Out-String
                      if ($LASTEXITCODE -ne 0) {
                          Write-Error "Command failed with exit code $($LASTEXITCODE): $output"
                          continue
                      }
                  } catch {
                      Write-Error "Failed to delete release: $release. Error: $_"
                      continue
                  }
                  Write-Host "Release $release has been successfully deleted."
              } else {
                  Write-Host "Skipping current release: $release"
              }
          }

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ env.OUTPUT_FILE_PREFIX }}.${{ steps.read_config.outputs.version }}.exe
          asset_name: ${{ env.OUTPUT_FILE_PREFIX }}.${{ steps.read_config.outputs.version }}.exe
          asset_content_type: application/octet-stream
